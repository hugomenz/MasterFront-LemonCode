<template>
  <section class="wrapper">
    <div class="flex align-items-center justify-content-between">
      <h1>Products</h1>
      total: {{ totalProducts }}
    </div>

    <form>
      <label for="filter"></label>
      <input id="filter" v-model="filterValue" />
    </form>

    <ul class="product-list">
      <li v-for="product in products" :key="product.id">
        <!-- <a ></a> -->
        <router-link :to="`/detail/${product.id}`">
          <article
            :class="{
              'product-container--has-discount': product.discount !== '0.0',
            }"
            class="grid product-container card"
          >
            <div class="image">
              <img :src="`https://picsum.photos/id/${product.id}/200`" alt="" />
            </div>
            <div class="product-container__content">
              <h2>
                {{ product.title }}
              </h2>
              <p>
                <span class="grey-text">Author: </span>
                <strong>{{ product.author }}</strong>
              </p>
              <p>
                <span class="grey-text">Publisher: </span>
                {{ product.publisher }}
              </p>
              <p>
                <span class="grey-text">Year: </span>{{ product.published }}
              </p>
            </div>
            <div class="flex product-container__aside flex column">
              <div class="text-align-end aside__price">
                <StaticPrice :quantity="product.price" />
              </div>
              <AddToCartButton class="button" @addItem="onAddItem(product)" />
            </div>
          </article>
        </router-link>
      </li>
    </ul>
  </section>
</template>

<script setup lang="ts">
import { ref } from 'vue'
import type { Product } from '@/types'

import StaticPrice from './StaticPrice.vue'
import AddToCartButton from './AddToCartButton.vue'

import useProductsApi from '@/composables/productsApi'
import { useCartStore } from '@/stores/cart'

const { products, totalProducts } = await useProductsApi()

const cartStore = useCartStore()
const onAddItem = (product: Product) => {
  cartStore.addItemToCart(product)
  console.log(cartStore.items)
}

const filterValue = ref('')
</script>

<style lang="scss">
.product-list {
  padding: 0;
  li {
    margin-bottom: 2em;
  }
}
.product-container {
  align-items: flex-start;
  grid-template-columns: 210px 1fr 100px;
}
.product-container--has-discount {
  background-color: rgba(yellow, 0.5);
}
</style>


*********************************
 
<template>
  <section class="wrapper">
    <div class="flex align-items-center justify-content-between">
      <h1>Products</h1>
      total: {{ totalProducts }}
    </div>

    <form>
      <label for="filter"></label>
      <input id="filter" v-model="filterValue" />
    </form>

    <ul class="product-list">
      <li v-for="product in filteredProducts" :key="product.id">
        <!-- <a ></a> -->
        <router-link :to="`/detail/${product.id}`">
          <article
            :class="{
              'product-container--has-discount': product.discount !== '0.0',
            }"
            class="grid product-container card"
          >
            <div class="image">
              <img :src="`https://picsum.photos/id/${product.id}/200`" alt="" />
            </div>
            <div class="product-container__content">
              <h2>
                {{ product.title }}
              </h2>
              <p>
                <span class="grey-text">Author: </span>
                <strong>{{ product.author }}</strong>
              </p>
              <p>
                <span class="grey-text">Publisher: </span>
                {{ product.publisher }}
              </p>
              <p>
                <span class="grey-text">Year: </span>{{ product.published }}
              </p>
            </div>
            <div class="flex product-container__aside flex column">
              <div class="text-align-end aside__price">
                <StaticPrice :quantity="product.price" />
              </div>
              <AddToCartButton class="button" @addItem="onAddItem(product)" />
            </div>
          </article>
        </router-link>
      </li>
    </ul>
  </section>
</template>

<script setup lang="ts">
import { ref, computed } from 'vue'
import type { Product } from '@/types'

import StaticPrice from './StaticPrice.vue'
import AddToCartButton from './AddToCartButton.vue'

import useProductsApi from '@/composables/productsApi'
import { useCartStore } from '@/stores/cart'

const { products } = await useProductsApi()

const cartStore = useCartStore()
const onAddItem = (product: Product) => {
  cartStore.addItemToCart(product)
  console.log(cartStore.items)
}

const filterValue = ref('')

const filteredProducts = computed(() => {
  const filter = filterValue.value.toLowerCase()
  return products.value.filter((product) => {
    return product.title.toLowerCase().includes(filter)
  })
})

const totalProducts = computed(() => {
  return filteredProducts.value.length
})
</script>

<style lang="scss">
.product-list {
  padding: 0;
  li {
    margin-bottom: 2em;
  }
}
.product-container {
  align-items: flex-start;
  grid-template-columns: 210px 1fr 100px;
}
.product-container--has-discount {
  background-color: rgba(yellow, 0.5);
}
</style>


*********************************
 

const filteredProducts = ref(products)

const totalProducts = computed(() => {
  return filteredProducts.value.length
})

const filterList = () => {
  filteredProducts.value = products.value.filter((product) => {
    return product.title.toLowerCase().includes(filterValue.value.toLowerCase())
  })
}

*********************************
 
https://vueuse.org/shared/usedebouncefn/

*********************************
 
npm i @vueuse/core  

*********************************
 
<template>
  <section class="wrapper">
    <div class="flex align-items-center justify-content-between">
      <h1>Products</h1>
      total: {{ totalProducts }}
    </div>

    <form>
      <label for="filter"></label>
      <input
        id="filter"
        name="filter"
        :value="filterValue"
        @input="(event) => onFilterInput(event.target.value)"
      />
    </form>

    <ul class="product-list">
      <li v-for="product in filteredProducts" :key="product.id">
        <!-- <a ></a> -->
        <router-link :to="`/detail/${product.id}`">
          <article
            :class="{
              'product-container--has-discount': product.discount !== '0.0',
            }"
            class="grid product-container card"
          >
            <div class="image">
              <img :src="`https://picsum.photos/id/${product.id}/200`" alt="" />
            </div>
            <div class="product-container__content">
              <h2>
                {{ product.title }}
              </h2>
              <p>
                <span class="grey-text">Author: </span>
                <strong>{{ product.author }}</strong>
              </p>
              <p>
                <span class="grey-text">Publisher: </span>
                {{ product.publisher }}
              </p>
              <p>
                <span class="grey-text">Year: </span>{{ product.published }}
              </p>
            </div>
            <div class="flex product-container__aside flex column">
              <div class="text-align-end aside__price">
                <StaticPrice :quantity="product.price" />
              </div>
              <AddToCartButton class="button" @addItem="onAddItem(product)" />
            </div>
          </article>
        </router-link>
      </li>
    </ul>
  </section>
</template>

<script setup lang="ts">
import { ref, computed } from 'vue'
import type { Product } from '@/types'
import { useDebounceFn } from '@vueuse/core'

import StaticPrice from './StaticPrice.vue'
import AddToCartButton from './AddToCartButton.vue'

import useProductsApi from '@/composables/productsApi'
import { useCartStore } from '@/stores/cart'

const { products } = await useProductsApi()

const cartStore = useCartStore()
const onAddItem = (product: Product) => {
  cartStore.addItemToCart(product)
  console.log(cartStore.items)
}

const filterValue = ref('')
const internalFilterValue = ref('')

const onFilterInput = (value: string) => {
  // eslint-disable-next-line
  filterValue.value = value
  useDebounceFn(() => {
    internalFilterValue.value = value
  }, 1000)()
}

const filteredProducts = computed(() => {
  const filter = internalFilterValue.value.toLowerCase()
  return products.value.filter((product) => {
    return product.title.toLowerCase().includes(filter)
  })
})

const totalProducts = computed(() => {
  return filteredProducts.value.length
})
</script>

<style lang="scss">
.product-list {
  padding: 0;
  li {
    margin-bottom: 2em;
  }
}
.product-container {
  align-items: flex-start;
  grid-template-columns: 210px 1fr 100px;
}
.product-container--has-discount {
  background-color: rgba(yellow, 0.5);
}
</style>


*********************************
 
import type { Product } from '@/types'
import { defineStore } from 'pinia'
import type { PiniaCustomStateProperties } from 'pinia'
export type CartItem = { quantity: number; product: Product }
export type CartItemRecord = Record<Product['id'], CartItem>

type state = {
  items: CartItemRecord
} & PiniaCustomStateProperties<{
  items: CartItemRecord
}>

export const useCartStore = defineStore<
  'cart',
  {
    items: CartItemRecord
    filterValue: string
  },
  {
    totalItems: (state: state) => number
  },
  {
    addItemToCart: (product: Product) => void
    changeFilterValue: (value: string) => void
  }
>({
  id: 'cart',
  state: () => ({
    items: {},
    filterValue: '',
  }),
  getters: {
    totalItems: (state: state) => {
      return Object.values(state.items)
        .map((item: CartItem) => item.quantity)
        .reduce(
          (accumulator: number, current: number) => accumulator + current,
          0
        )
    },
  },
  actions: {
    addItemToCart(product: Product) {
      this.items[product.id] = {
        product,
        quantity: this.items[product.id]?.quantity + 1 || 1,
      }
    },
    changeFilterValue(value: string) {
      this.filterValue = value
    },
  },
})


*********************************
 
<template>
  <section class="wrapper">
    <div class="flex align-items-center justify-content-between">
      <h1>Products</h1>
      total: {{ totalProducts }}
    </div>

    <form>
      <label for="filter"></label>
      <input id="filter" v-model="cartStore.filterValue" />
    </form>

    <ul class="product-list">
      <li v-for="product in filteredProducts" :key="product.id">
        <!-- <a ></a> -->
        <router-link :to="`/detail/${product.id}`">
          <article
            :class="{
              'product-container--has-discount': product.discount !== '0.0',
            }"
            class="grid product-container card"
          >
            <div class="image">
              <img :src="`https://picsum.photos/id/${product.id}/200`" alt="" />
            </div>
            <div class="product-container__content">
              <h2>
                {{ product.title }}
              </h2>
              <p>
                <span class="grey-text">Author: </span>
                <strong>{{ product.author }}</strong>
              </p>
              <p>
                <span class="grey-text">Publisher: </span>
                {{ product.publisher }}
              </p>
              <p>
                <span class="grey-text">Year: </span>{{ product.published }}
              </p>
            </div>
            <div class="flex product-container__aside flex column">
              <div class="text-align-end aside__price">
                <StaticPrice :quantity="product.price" />
              </div>
              <AddToCartButton class="button" @addItem="onAddItem(product)" />
            </div>
          </article>
        </router-link>
      </li>
    </ul>
  </section>
</template>

<script setup lang="ts">
import { computed } from 'vue'
import type { Product } from '@/types'

import StaticPrice from './StaticPrice.vue'
import AddToCartButton from './AddToCartButton.vue'

import useProductsApi from '@/composables/productsApi'
import { useCartStore } from '@/stores/cart'

const { products } = await useProductsApi()

const cartStore = useCartStore()
const onAddItem = (product: Product) => {
  cartStore.addItemToCart(product)
  console.log(cartStore.items)
}

const filteredProducts = computed(() => {
  const filter = cartStore.filterValue?.toLowerCase()
  return products.value.filter((product) => {
    return product.title.toLowerCase().includes(filter)
  })
})

const totalProducts = computed(() => {
  return filteredProducts.value.length
})
</script>

<style lang="scss">
.product-list {
  padding: 0;
  li {
    margin-bottom: 2em;
  }
}
.product-container {
  align-items: flex-start;
  grid-template-columns: 210px 1fr 100px;
}
.product-container--has-discount {
  background-color: rgba(yellow, 0.5);
}
</style>


*********************************
 
<template>
  <button @click.prevent="addItem">
    <slot />
  </button>
</template>

<script lang="ts">
import { defineComponent } from 'vue'

export default defineComponent({
  methods: {
    addItem() {
      this.$emit('add-item')
    },
  },
})
</script>


*********************************
 
<template>
  <section class="wrapper">
    <div class="flex align-items-center justify-content-between">
      <h1>Products</h1>
      total: {{ totalProducts }}
    </div>

    <form>
      <label for="filter"></label>
      <input id="filter" v-model="cartStore.filterValue" />
    </form>

    <ul class="product-list">
      <li v-for="product in filteredProducts" :key="product.id">
        <!-- <a ></a> -->
        <router-link :to="`/detail/${product.id}`">
          <article
            :class="{
              'product-container--has-discount': product.discount !== '0.0',
            }"
            class="grid product-container card"
          >
            <div class="image">
              <img :src="`https://picsum.photos/id/${product.id}/200`" alt="" />
            </div>
            <div class="product-container__content">
              <h2>
                {{ product.title }}
              </h2>
              <p>
                <span class="grey-text">Author: </span>
                <strong>{{ product.author }}</strong>
              </p>
              <p>
                <span class="grey-text">Publisher: </span>
                {{ product.publisher }}
              </p>
              <p>
                <span class="grey-text">Year: </span>{{ product.published }}
              </p>
            </div>
            <div class="flex product-container__aside flex column">
              <div class="text-align-end aside__price">
                <StaticPrice :quantity="product.price" />
              </div>
              <AddToCartButton class="button" @addItem="onAddItem(product)">
                <span>Add to cart</span>
              </AddToCartButton>
            </div>
          </article>
        </router-link>
      </li>
    </ul>
  </section>
</template>

<script setup lang="ts">
import { computed } from 'vue'
import type { Product } from '@/types'

import StaticPrice from './StaticPrice.vue'
import AddToCartButton from './AddToCartButton.vue'

import useProductsApi from '@/composables/productsApi'
import { useCartStore } from '@/stores/cart'

const { products } = await useProductsApi()

const cartStore = useCartStore()
const onAddItem = (product: Product) => {
  cartStore.addItemToCart(product)
  console.log(cartStore.items)
}

const filteredProducts = computed(() => {
  const filter = cartStore.filterValue?.toLowerCase()
  return products.value.filter((product) => {
    return product.title.toLowerCase().includes(filter)
  })
})

const totalProducts = computed(() => {
  return filteredProducts.value.length
})
</script>

<style lang="scss">
.product-list {
  padding: 0;
  li {
    margin-bottom: 2em;
  }
}
.product-container {
  align-items: flex-start;
  grid-template-columns: 210px 1fr 100px;
}
.product-container--has-discount {
  background-color: rgba(yellow, 0.5);
}
</style>


*********************************
 
npm install -D vitest

*********************************
 
npm i -D @vue/test-utils @pinia/testing

*********************************
 
import { defineConfig } from 'vitest/config'
import { fileURLToPath, URL } from 'url'

export default defineConfig({
  test: {
    globals: true,
    environment: 'jsdom',
  },
  alias: {
    '@': fileURLToPath(new URL('./src', import.meta.url)),
  },
})


*********************************
 
https://vitest.dev/guide/features.html

*********************************
 
import { mount } from '@vue/test-utils'
import { describe, it, expect } from 'vitest'

import ProductList from './ProductList.vue'

describe('ProductList', () => {
  it('renders a list of products', async () => {
    // arrange
    const wrapper = mount(ProductList)
    console.log(wrapper)
    // assert
    expect(wrapper.findAll('li').length).toBe(100)
  })
})


*********************************
 
npm i -D @vitejs/plugin-vue

*********************************
 
import { mount, flushPromises } from '@vue/test-utils'
import { describe, it, expect, vi } from 'vitest'
import { createTestingPinia } from '@pinia/testing'

import ProductList from './ProductList.vue'
import books from '../../public/books.mock.json'

vi.stubGlobal('fetch', () =>
  Promise.resolve({ json: () => Promise.resolve(books) })
)

describe('ProductList', () => {
  it('renders a list of products', async () => {
    // arrange
    const wrapper = mount(
      {
        components: { ProductList },
        template: `
        <Suspense>
          <template #default>
            <ProductList />
          </template>
          <template #fallback>
            <div>Loading...</div>
          </template>
        </Suspense>
      `,
      },
      {
        global: {
          plugins: [createTestingPinia()],
        },
      }
    )

    await flushPromises()

    // assert
    expect(wrapper.findAll('li').length).toBe(100)
  })
})


*********************************
 
{
  "name": "ecommerce-app",
  "version": "0.0.0",
  "scripts": {
    "dev": "vite",
    "build": "run-p type-check build-only",
    "preview": "vite preview --port 4173",
    "build-only": "vite build",
    "type-check": "vue-tsc --noEmit",
    "lint": "eslint . --ext .vue,.js,.jsx,.cjs,.mjs,.ts,.tsx,.cts,.mts --fix --ignore-path .gitignore",
    "test": "vitest"
  },
  "dependencies": {
    "@vueuse/core": "^8.9.4",
    "pinia": "^2.0.14",
    "vue": "^3.2.37",
    "vue-router": "^4.1.2"
  },
  "devDependencies": {
    "@pinia/testing": "^0.0.12",
    "@rushstack/eslint-patch": "^1.1.0",
    "@types/node": "^16.11.43",
    "@vitejs/plugin-vue": "^2.3.3",
    "@vue/eslint-config-prettier": "^7.0.0",
    "@vue/eslint-config-typescript": "^11.0.0",
    "@vue/test-utils": "^2.0.2",
    "@vue/tsconfig": "^0.1.3",
    "eslint": "^8.5.0",
    "eslint-plugin-vue": "^9.0.0",
    "jsdom": "^20.0.0",
    "npm-run-all": "^4.1.5",
    "prettier": "^2.5.1",
    "sass": "^1.53.0",
    "typescript": "~4.7.4",
    "vite": "^2.9.14",
    "vitest": "^0.18.1",
    "vue-tsc": "^0.38.4"
  }
}


*********************************
 